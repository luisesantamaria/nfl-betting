name: persist-scores

on:
  workflow_dispatch: {}
  schedule:
    # TNF (Thursday Night Football)
    # Viernes 00–06 UTC  ≈ Jueves 8:00 PM–2:00 AM ET
    - cron: "*/5 0-6 * * 5"

    # Juegos internacionales del domingo (London/Frankfurt)
    # Domingo 13–16 UTC ≈ 9:00 AM–12:00 PM ET
    - cron: "*/5 13-16 * * 0"

    # Ventanas del domingo SIN huecos (1 PM y 4:05/4:25 PM ET)
    # Domingo 17–23 UTC ≈ 1:00 PM–7:59 PM ET
    - cron: "*/5 17-23 * * 0"

    # SNF (Sunday Night Football) + buffer de OT/retrasos
    # Lunes 00–05 UTC ≈ Domingo 8:00 PM–12:59 AM ET
    - cron: "*/5 0-5 * * 1"

    # MNF (Monday Night Football) + buffer
    # Martes 00–06 UTC ≈ Lunes 8:00 PM–1:59 AM ET
    - cron: "*/5 0-6 * * 2"

    # Extra: último persist del lunes 23:30 UTC
    - cron: "30 23 * * 1"

concurrency:
  group: persist-scores-${{ github.ref }}
  cancel-in-progress: false

jobs:
  persist_scores:
    name: 1) Persist finished scores into odds
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install pandas numpy requests

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Persist finished scores into odds
        run: |
          set -euxo pipefail
          python scripts/persist_scores.py

      - name: Commit & push (rebase-safe)
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -euxo pipefail
          git config --global user.name  "github-actions"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory "$PWD"
          git config --global pull.rebase true
          git config --global rebase.autoStash true

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore(scores): persist scores into odds [skip ci]"
          git fetch origin "${BRANCH_NAME}"
          git pull --rebase --autostash origin "${BRANCH_NAME}" || (git rebase --abort && git pull --rebase --autostash origin "${BRANCH_NAME}")
          git push origin "${BRANCH_NAME}" || {
            echo "Push failed, retrying after rebase..."
            git pull --rebase --autostash origin "${BRANCH_NAME}"
            git push origin "${BRANCH_NAME}"
          }

  annotate_bets:
    name: 2) Annotate bets (profit, bankroll, freeze finals)
    runs-on: ubuntu-latest
    needs: persist_scores
    permissions:
      contents: write
    env:
      BANKROLL_INITIAL: "1000"  # Ajusta si cambias tu anchor
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install pandas numpy

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Annotate bets with profit & bankroll (live)
        run: |
          set -euxo pipefail
          python scripts/annotate_bets_with_profit_and_bankroll.py

      - name: Commit & push (rebase-safe)
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -euxo pipefail
          git config --global user.name  "github-actions"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory "$PWD"
          git config --global pull.rebase true
          git config --global rebase.autoStash true

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore(annotate): bets profit & bankroll (freeze finals) [skip ci]"
          git fetch origin "${BRANCH_NAME}"
          git pull --rebase --autostash origin "${BRANCH_NAME}" || (git rebase --abort && git pull --rebase --autostash origin "${BRANCH_NAME}")
          git push origin "${BRANCH_NAME}" || {
            echo "Push failed, retrying after rebase..."
            git pull --rebase --autostash origin "${BRANCH_NAME}"
            git push origin "${BRANCH_NAME}"
          }

  build_pnl:
    name: 3) Build P&L (only final weeks)
    runs-on: ubuntu-latest
    needs: annotate_bets
    permissions:
      contents: write
    env:
      BANKROLL_INITIAL: "1000"  # mismo anchor
      # Si tus CSV estuvieran en otro sitio, puedes inyectarlos:
      # BPNL_BETS_CSV: "data/live/bets.csv"
      # BPNL_ODDS_CSV: "data/live/odds.csv"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install pandas numpy

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Build PnL (live)
        run: |
          set -euxo pipefail
          python scripts/build_pnl_live.py

      - name: Commit & push (rebase-safe)
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -euxo pipefail
          git config --global user.name  "github-actions"
          git config --global user.email "actions@github.com"
          git config --global --add safe.directory "$PWD"
          git config --global pull.rebase true
          git config --global rebase.autoStash true

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore(pnl): build P&L live (final weeks only) [skip ci]"
          git fetch origin "${BRANCH_NAME}"
          git pull --rebase --autostash origin "${BRANCH_NAME}" || (git rebase --abort && git pull --rebase --autostash origin "${BRANCH_NAME}")
          git push origin "${BRANCH_NAME}" || {
            echo "Push failed, retrying after rebase..."
            git pull --rebase --autostash origin "${BRANCH_NAME}"
            git push origin "${BRANCH_NAME}"
          }
